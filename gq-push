#!/bin/bash
#
# Copyright (c) Josef "Jeff" Sipek, 2006
#

source "`dirname $0`/gq.lib"

export GIT_DIR=`find_git_dir`
GQ_DIR="$GIT_DIR/patches"

branch=`get_branch_verify`
series="$GQ_DIR/$branch/series"
applied="$GQ_DIR/$branch/status"

patch="$1"

TOP=`git-rev-parse --show-cdup`
if [ -z "$TOP" ]; then
	TOP="./"
fi
#cd $TOP

function index_update_magic
{
	while read l; do
		act=`echo $l | cut -d: -f 1`
		fil=`echo $l | cut -d: -f 2`
		echo "$fil change detected..$act"
		git-update-index --add --remove "$fil"
	done
}

if [ "$patch" = "--all" -o "$patch" = "-a" ]; then
	# we are supposed to push all patches, get the last one out of
	# series

	eidx=`wc -l < $series`
	if [ $eidx -eq 0 ]; then
		echo "There are no patches to push"
		exit 1
	fi
elif [ -z "$patch" ]; then
	# we are supposed to push only the next patch onto the stack

	eidx=`wc -l < $applied`
	eidx=`expr $eidx + 1`
else
	# we're supposed to push only up to a patch, make sure the patch is
	# in the series

	eidx=`cat $series | grep -ne "^$patch\$" | cut -d: -f1`
	if [ $eidx -eq 0 ]; then
		echo "Patch $patch is not in the series"
		exit 1
	fi
fi

# now, find the starting patch
sidx=`wc -l < $applied`
sidx=`expr $sidx + 1`

bail=0
idx=0
for p in `cat $series`; do
	idx=`expr $idx + 1`
	[ $idx -lt $sidx ] && continue
	[ $idx -gt $eidx ] && break

	echo "Applying patch..$p"
	if [ ! -f "$GQ_DIR/$branch/$p" ]; then
		echo "Patch $patch does not exist. Aborting."
		exit 1
	fi

	git-apply --reject $GQ_DIR/$branch/$p
	bail=$?

	( git-apply --numstat $GQ_DIR/$branch/$p | awk '{print "changed:" $3}';
	#git-apply --summary $GQ_DIR/$branch/$p | awk '
	#	/^ (create|delete)/{print $1 ":" $4}
	#	/^ mode change/{print "mode:" $6}'
	)| index_update_magic

	# grab a commit message out of the patch
	cat $GQ_DIR/$branch/$p | awk 'BEGIN{ok=1}/^(diff|---)/{ok=0}{if (ok==1) print $0}' > /tmp/gq.msg.$$

	# make a default commit message if patch doesn't contain one
	[ ! -s /tmp/gq.msg.$$ ] && echo "patch $p" > /tmp/gq.msg.$$

	# commit
	treeish=`git-write-tree`
	echo "Tree: $treeish"
	commitish=`git-commit-tree $treeish -p HEAD < /tmp/gq.msg.$$`
	echo "Commit: $commitish"
	echo $commitish > $GIT_DIR/`git-symbolic-ref HEAD`

	rm -f /tmp/gq.msg.$$

	# mark patch as applied
	echo $p >> $applied

	# bail if necessary
	if [ $bail -eq 0 ]; then
		echo "Patch applied."
	else
		echo "Patch applied with rejects. Fix it up, and refresh."
		break
	fi
done

